{"version":3,"sources":["src/app/pages/episode-details/episode-details.page.html","src/app/pages/episode-details/episode-details-routing.module.ts","src/app/pages/episode-details/episode-details.module.ts","src/app/pages/episode-details/episode-details.page.scss","src/app/pages/episode-details/episode-details.page.ts","src/app/services/episode-reaction.service.ts"],"names":[],"mappings":"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","sourcesContent":["export default \"<ion-header>\\n\\t<!-- Toolbar theme -->\\n\\t<ion-toolbar color=\\\"primary\\\">\\n\\t\\t<!-- Back navigation to episodes page -->\\n\\t\\t<ion-buttons slot=\\\"start\\\" defaultHref=\\\"/tabs/(episodes:episodes)\\\">\\n\\t\\t\\t<ion-back-button></ion-back-button>\\n\\t\\t</ion-buttons>\\n\\t\\t<!-- It Loads the name of the current episode in the title -->\\n\\t\\t<ion-title> {{ episode?.title }}</ion-title>\\n\\t\\t<!-- Like and dislike button bar -->\\n\\t\\t<ion-buttons slot=\\\"end\\\">\\n\\t\\t\\t<ion-button (click)=\\\"neutreEpisode()\\\" *ngIf=\\\"isLiked\\\">\\n\\t\\t\\t\\t<ion-icon name=\\\"thumbs-up\\\" slot=\\\"icon-only\\\"></ion-icon>\\n\\t\\t\\t</ion-button>\\n\\t\\t\\t<ion-button (click)=\\\"likeEpisode()\\\" *ngIf=\\\"!isLiked\\\">\\n\\t\\t\\t\\t<ion-icon name=\\\"thumbs-up-outline\\\" slot=\\\"icon-only\\\"></ion-icon>\\n\\t\\t\\t</ion-button>\\n            <ion-button (click)=\\\"neutreEpisode()\\\" *ngIf=\\\"isDisliked\\\">\\n\\t\\t\\t\\t<ion-icon name=\\\"thumbs-down\\\" slot=\\\"icon-only\\\"></ion-icon>\\n\\t\\t\\t</ion-button>\\n\\t\\t\\t<ion-button (click)=\\\"dislikeEpisode()\\\" *ngIf=\\\"!isDisliked\\\">\\n\\t\\t\\t\\t<ion-icon name=\\\"thumbs-down-outline\\\" slot=\\\"icon-only\\\"></ion-icon>\\n\\t\\t\\t</ion-button>\\n        </ion-buttons>\\n\\t</ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n\\t<!-- Details of the selected episode -->\\n\\t<ion-card *ngIf=\\\"episode\\\">\\n    <ion-card>\\n\\t\\t\\t<ion-card-content>\\n\\t\\t\\t\\t<b>Id:</b> {{ episode.episode_id }}\\n\\t\\t\\t</ion-card-content>\\n\\t\\t</ion-card>\\n\\t\\t<ion-card>\\n\\t\\t\\t<ion-card-content>\\n\\t\\t\\t\\t<b>Title:</b> {{ episode.title }}\\n\\t\\t\\t</ion-card-content>\\n\\t\\t</ion-card>\\n\\t\\t<ion-card>\\n\\t\\t\\t<ion-card-content>\\n\\t\\t\\t\\t<b>Season:</b> {{ episode.season }}\\n\\t\\t\\t</ion-card-content>\\n\\t\\t</ion-card>\\n\\t\\t<ion-card>\\n\\t\\t\\t<ion-card-content>\\n\\t\\t\\t\\t<b>Episode:</b> {{ episode.episode }}\\n\\t\\t\\t</ion-card-content>\\n\\t\\t</ion-card>\\n\\t\\t<ion-card>\\n\\t\\t\\t<ion-card-content>\\n\\t\\t\\t\\t<b>Air Date:</b> {{ episode.air_date }}\\n\\t\\t\\t</ion-card-content>\\n\\t\\t</ion-card>\\n\\t\\t<ion-card>\\n\\t\\t\\t<ion-card-content>\\n\\t\\t\\t\\t<b>Characters:</b> {{ episode.characters }}\\n\\t\\t\\t</ion-card-content>\\n\\t\\t</ion-card>\\n\\t</ion-card>\\n</ion-content>\"","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { EpisodeDetailsPage } from './episode-details.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: EpisodeDetailsPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class EpisodeDetailsPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { EpisodeDetailsPageRoutingModule } from './episode-details-routing.module';\n\nimport { EpisodeDetailsPage } from './episode-details.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    EpisodeDetailsPageRoutingModule\n  ],\n  declarations: [EpisodeDetailsPage]\n})\nexport class EpisodeDetailsPageModule {}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL2VwaXNvZGUtZGV0YWlscy9lcGlzb2RlLWRldGFpbHMucGFnZS5zY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { ApiService } from './../../services/api.service';\nimport {EpisodeReactionService } from './../../services/episode-reaction.service';\n\n@Component({\n    selector: 'app-episode-details',\n    templateUrl: './episode-details.page.html',\n    styleUrls: ['./episode-details.page.scss'],\n})\nexport class EpisodeDetailsPage implements OnInit {\n\n    episode: any;\n    episodeId = null;\n    isLiked = false;\n    isDisliked = false;\n\n    constructor(private activatedRoute: ActivatedRoute, private api: ApiService, private reactionService: EpisodeReactionService) { }\n\n    ngOnInit() {\n        //get te id of the episode\n        this.episodeId = this.activatedRoute.snapshot.paramMap.get('id');\n        \n        //get and set up the information of the character\n        this.api.getEpisode(this.episodeId).subscribe(res => {\n            this.episode = res[0];\n        });\n        \n        //initialize variables used to store the like/dislike/neutral state\n        this.reactionService.isLiked(this.episodeId).then(liked => {\n            this.isLiked = liked;\n            console.log(\"liked\");\n            console.log(JSON.stringify(liked));\n        });\n        this.reactionService.isDisliked(this.episodeId).then(disliked => {\n            this.isDisliked = disliked;\n            console.log(\"disliked\");\n            console.log(JSON.stringify(disliked));\n        });\n    }\n\n    //Function used for like a episode\n    likeEpisode() {\n        // After calling the funcion likeEpisode from reaction service, \n        // it updates the variables of states of the buttons like and dislike \n        this.reactionService.likeEpisode(this.episodeId).then(() => {\n            this.isLiked = true;\n            this.isDisliked = false;\n        });\n    }\n\n    //Function used for dislike a episode\n    dislikeEpisode(){\n        // After calling the funcion dislikeEpisode from reaction service, \n        // it updates the variables of states of the buttons like and dislike \n        this.reactionService.dislikeEpisode(this.episodeId).then(() => {\n            this.isLiked = false;\n            this.isDisliked = true;\n        });\n    }\n\n    //This function is called when a Episode is unlike or undisliked\n    neutreEpisode(){\n        // After calling the funcion neutreEpisode from reaction service, \n        // it updates the variables os states of the buttons like and dislike\n        this.reactionService.neutreEpisode(this.episodeId);\n        this.isLiked = false;\n        this.isDisliked = false;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Storage } from '@ionic/storage';\n\n//Constants that will store the liked and disliked episodes keys\nconst LIKE_KEY = 'likedEpisodes';\nconst DISLIKE_KEY = 'dislikedEpisodes';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class EpisodeReactionService {\n\n    constructor(private storage: Storage) { }\n\n    //It return all the liked episodes\n    getLikedEpisodes() {\n        console.log(\"getLikedEpisodes\");\n        console.log(JSON.stringify(this.storage.get(LIKE_KEY)));\n        return this.storage.get(LIKE_KEY);\n    }\n\n    //It return all the disliked episodes\n    getDislikedEpisodes() {\n        console.log(\"getDislikedEpisodes\");\n        console.log(JSON.stringify(this.storage.get(DISLIKE_KEY)));\n        return this.storage.get(DISLIKE_KEY);\n    }\n\n    //It verifies if an episodeId is the liked list\n    isLiked(episodeId) {\n        return this.getLikedEpisodes().then(result => {\n            console.log(\"isLiked\");\n            console.log(JSON.stringify(result.indexOf(episodeId)));\n            return result && result.indexOf(episodeId) !== -1;\n        });\n    }\n\n    //It verifies if an episodeId is the disliked list\n    isDisliked(episodeId) {\n        return this.getDislikedEpisodes().then(result => {\n            console.log(\"isDisliked\");\n            console.log(JSON.stringify(result.indexOf(episodeId)));\n            return result && result.indexOf(episodeId) !== -1;\n        });\n    }\n\n      //It likes an episode - adds it to the liked list \n    likeEpisode(episodeId) {\n         //For making sure it is not going to be in both list at the same time,\n        //the function removeFromDislikedEpisode is used\n        this.removeFromDislikedEpisode(episodeId);\n        console.log(\"likeEpisode\");\n        //It gets all the liked episodes\n        return this.getLikedEpisodes().then(result => {\n            if (result) {\n                //If the result is true, it means that there is an existent liked list already\n                //The episodeId is add to result\n                result.push(episodeId);\n                //It is saved\n                this.storage.set(LIKE_KEY, result);\n                return true;\n            } else {\n                //If the result is false, it means that there is no liked list yet\n                //The episodeId is saved in the liked list\n                this.storage.set(LIKE_KEY, [episodeId]);\n                return true;\n            }\n        });\n    }\n\n    //It dilikes an episode - adds it to the disliked list \n    dislikeEpisode(episodeId) {\n        //For making sure it is not going to be in both list at the same time,\n        //the function removeFromLikedEpisode is used\n        this.removeFromLikedEpisode(episodeId);\n        //It gets all the disliked episodes\n        return this.getDislikedEpisodes().then(result => {\n            if (result) {\n                //If the result is true, it means that there is an existent disliked list already\n                //The episodeId is add to result\n                result.push(episodeId);\n                //It is saved\n                this.storage.set(DISLIKE_KEY, result);\n                return true;\n            } else {\n                //If the result is false, it means that there is no dislike list yet\n                //The episodeId is saved in disliked the list\n                this.storage.set(DISLIKE_KEY, [episodeId]);\n                return true;\n            }\n        });\n    }\n\n    //When an episode is liked or disliked it will be removed from both lists\n    neutreEpisode(episodeId) {\n        this.removeFromDislikedEpisode(episodeId);\n        this.removeFromLikedEpisode(episodeId);\n    }\n\n    //It removes an episodeId from the liked list\n    removeFromLikedEpisode(episodeId) {\n        return this.getLikedEpisodes().then(result => {\n            //It verifies if the given characterId is in the liked list and removes it\n            if (result &&  result.indexOf(episodeId) !== -1) {   \n                var index = result.indexOf(episodeId);\n                result.splice(index, 1);\n                return this.storage.set(LIKE_KEY, result);\n            }\n        });\n    }\n\n    //It removes an episodeId from the disliked list\n    removeFromDislikedEpisode(episodeId) {\n        return this.getDislikedEpisodes().then(result => {\n            console.log(JSON.stringify(result.indexOf(episodeId)));\n            //It verifies if the given characterId is in the disliked list and removes it\n            if (result && result.indexOf(episodeId) !== -1) {\n                var index = result.indexOf(episodeId);\n                result.splice(index, 1);\n                return this.storage.set(DISLIKE_KEY, result);\n            }\n        });\n    }\n}\n"],"sourceRoot":"webpack:///","file":"episode-details-episode-details-module-es5.js"}