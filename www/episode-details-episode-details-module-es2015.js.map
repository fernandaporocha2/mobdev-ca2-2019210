{"version":3,"sources":["./src/app/pages/episode-details/episode-details.page.html","./src/app/pages/episode-details/episode-details-routing.module.ts","./src/app/pages/episode-details/episode-details.module.ts","./src/app/pages/episode-details/episode-details.page.scss","./src/app/pages/episode-details/episode-details.page.ts","./src/app/services/episode-reaction.service.ts"],"names":[],"mappings":"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","file":"episode-details-episode-details-module-es2015.js","sourcesContent":["export default \"<ion-header>\\n\\t<!-- Toolbar theme -->\\n\\t<ion-toolbar color=\\\"primary\\\">\\n\\t\\t<!-- Back navigation to episodes page -->\\n\\t\\t<ion-buttons slot=\\\"start\\\" defaultHref=\\\"/tabs/(episodes:episodes)\\\">\\n\\t\\t\\t<ion-back-button></ion-back-button>\\n\\t\\t</ion-buttons>\\n\\t\\t<!-- It Loads the name of the current episode in the title -->\\n\\t\\t<ion-title> {{ episode?.title }}</ion-title>\\n\\t\\t<!-- Like and dislike button bar -->\\n\\t\\t<ion-buttons slot=\\\"end\\\">\\n\\t\\t\\t<ion-button (click)=\\\"neutreEpisode()\\\" *ngIf=\\\"isLiked\\\">\\n\\t\\t\\t\\t<ion-icon name=\\\"thumbs-up\\\" slot=\\\"icon-only\\\"></ion-icon>\\n\\t\\t\\t</ion-button>\\n\\t\\t\\t<ion-button (click)=\\\"likeEpisode()\\\" *ngIf=\\\"!isLiked\\\">\\n\\t\\t\\t\\t<ion-icon name=\\\"thumbs-up-outline\\\" slot=\\\"icon-only\\\"></ion-icon>\\n\\t\\t\\t</ion-button>\\n            <ion-button (click)=\\\"neutreEpisode()\\\" *ngIf=\\\"isDisliked\\\">\\n\\t\\t\\t\\t<ion-icon name=\\\"thumbs-down\\\" slot=\\\"icon-only\\\"></ion-icon>\\n\\t\\t\\t</ion-button>\\n\\t\\t\\t<ion-button (click)=\\\"dislikeEpisode()\\\" *ngIf=\\\"!isDisliked\\\">\\n\\t\\t\\t\\t<ion-icon name=\\\"thumbs-down-outline\\\" slot=\\\"icon-only\\\"></ion-icon>\\n\\t\\t\\t</ion-button>\\n        </ion-buttons>\\n\\t</ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n\\t<!-- Details of the selected episode -->\\n\\t<ion-card *ngIf=\\\"episode\\\">\\n    <ion-card>\\n\\t\\t\\t<ion-card-content>\\n\\t\\t\\t\\t<b>Id:</b> {{ episode.episode_id }}\\n\\t\\t\\t</ion-card-content>\\n\\t\\t</ion-card>\\n\\t\\t<ion-card>\\n\\t\\t\\t<ion-card-content>\\n\\t\\t\\t\\t<b>Title:</b> {{ episode.title }}\\n\\t\\t\\t</ion-card-content>\\n\\t\\t</ion-card>\\n\\t\\t<ion-card>\\n\\t\\t\\t<ion-card-content>\\n\\t\\t\\t\\t<b>Season:</b> {{ episode.season }}\\n\\t\\t\\t</ion-card-content>\\n\\t\\t</ion-card>\\n\\t\\t<ion-card>\\n\\t\\t\\t<ion-card-content>\\n\\t\\t\\t\\t<b>Episode:</b> {{ episode.episode }}\\n\\t\\t\\t</ion-card-content>\\n\\t\\t</ion-card>\\n\\t\\t<ion-card>\\n\\t\\t\\t<ion-card-content>\\n\\t\\t\\t\\t<b>Air Date:</b> {{ episode.air_date }}\\n\\t\\t\\t</ion-card-content>\\n\\t\\t</ion-card>\\n\\t\\t<ion-card>\\n\\t\\t\\t<ion-card-content>\\n\\t\\t\\t\\t<b>Characters:</b> {{ episode.characters }}\\n\\t\\t\\t</ion-card-content>\\n\\t\\t</ion-card>\\n\\t</ion-card>\\n</ion-content>\"","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { EpisodeDetailsPage } from './episode-details.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: EpisodeDetailsPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class EpisodeDetailsPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { EpisodeDetailsPageRoutingModule } from './episode-details-routing.module';\n\nimport { EpisodeDetailsPage } from './episode-details.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    EpisodeDetailsPageRoutingModule\n  ],\n  declarations: [EpisodeDetailsPage]\n})\nexport class EpisodeDetailsPageModule {}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL2VwaXNvZGUtZGV0YWlscy9lcGlzb2RlLWRldGFpbHMucGFnZS5zY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { ApiService } from './../../services/api.service';\nimport {EpisodeReactionService } from './../../services/episode-reaction.service';\n\n@Component({\n    selector: 'app-episode-details',\n    templateUrl: './episode-details.page.html',\n    styleUrls: ['./episode-details.page.scss'],\n})\nexport class EpisodeDetailsPage implements OnInit {\n\n    episode: any;\n    episodeId = null;\n    isLiked = false;\n    isDisliked = false;\n\n    constructor(private activatedRoute: ActivatedRoute, private api: ApiService, private reactionService: EpisodeReactionService) { }\n\n    ngOnInit() {\n        //get te id of the episode\n        this.episodeId = this.activatedRoute.snapshot.paramMap.get('id');\n        \n        //get and set up the information of the character\n        this.api.getEpisode(this.episodeId).subscribe(res => {\n            this.episode = res[0];\n        });\n        \n        //initialize variables used to store the like/dislike/neutral state\n        this.reactionService.isLiked(this.episodeId).then(liked => {\n            this.isLiked = liked;\n            console.log(\"liked\");\n            console.log(JSON.stringify(liked));\n        });\n        this.reactionService.isDisliked(this.episodeId).then(disliked => {\n            this.isDisliked = disliked;\n            console.log(\"disliked\");\n            console.log(JSON.stringify(disliked));\n        });\n    }\n\n    //Function used for like a episode\n    likeEpisode() {\n        // After calling the funcion likeEpisode from reaction service, \n        // it updates the variables of states of the buttons like and dislike \n        this.reactionService.likeEpisode(this.episodeId).then(() => {\n            this.isLiked = true;\n            this.isDisliked = false;\n        });\n    }\n\n    //Function used for dislike a episode\n    dislikeEpisode(){\n        // After calling the funcion dislikeEpisode from reaction service, \n        // it updates the variables of states of the buttons like and dislike \n        this.reactionService.dislikeEpisode(this.episodeId).then(() => {\n            this.isLiked = false;\n            this.isDisliked = true;\n        });\n    }\n\n    //This function is called when a Episode is unlike or undisliked\n    neutreEpisode(){\n        // After calling the funcion neutreEpisode from reaction service, \n        // it updates the variables os states of the buttons like and dislike\n        this.reactionService.neutreEpisode(this.episodeId);\n        this.isLiked = false;\n        this.isDisliked = false;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Storage } from '@ionic/storage';\n\n//Constants that will store the liked and disliked episodes keys\nconst LIKE_KEY = 'likedEpisodes';\nconst DISLIKE_KEY = 'dislikedEpisodes';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class EpisodeReactionService {\n\n    constructor(private storage: Storage) { }\n\n    //It return all the liked episodes\n    getLikedEpisodes() {\n        console.log(\"getLikedEpisodes\");\n        console.log(JSON.stringify(this.storage.get(LIKE_KEY)));\n        return this.storage.get(LIKE_KEY);\n    }\n\n    //It return all the disliked episodes\n    getDislikedEpisodes() {\n        console.log(\"getDislikedEpisodes\");\n        console.log(JSON.stringify(this.storage.get(DISLIKE_KEY)));\n        return this.storage.get(DISLIKE_KEY);\n    }\n\n    //It verifies if an episodeId is the liked list\n    isLiked(episodeId) {\n        return this.getLikedEpisodes().then(result => {\n            console.log(\"isLiked\");\n            console.log(JSON.stringify(result.indexOf(episodeId)));\n            return result && result.indexOf(episodeId) !== -1;\n        });\n    }\n\n    //It verifies if an episodeId is the disliked list\n    isDisliked(episodeId) {\n        return this.getDislikedEpisodes().then(result => {\n            console.log(\"isDisliked\");\n            console.log(JSON.stringify(result.indexOf(episodeId)));\n            return result && result.indexOf(episodeId) !== -1;\n        });\n    }\n\n      //It likes an episode - adds it to the liked list \n    likeEpisode(episodeId) {\n         //For making sure it is not going to be in both list at the same time,\n        //the function removeFromDislikedEpisode is used\n        this.removeFromDislikedEpisode(episodeId);\n        console.log(\"likeEpisode\");\n        //It gets all the liked episodes\n        return this.getLikedEpisodes().then(result => {\n            if (result) {\n                //If the result is true, it means that there is an existent liked list already\n                //The episodeId is add to result\n                result.push(episodeId);\n                //It is saved\n                this.storage.set(LIKE_KEY, result);\n                return true;\n            } else {\n                //If the result is false, it means that there is no liked list yet\n                //The episodeId is saved in the liked list\n                this.storage.set(LIKE_KEY, [episodeId]);\n                return true;\n            }\n        });\n    }\n\n    //It dilikes an episode - adds it to the disliked list \n    dislikeEpisode(episodeId) {\n        //For making sure it is not going to be in both list at the same time,\n        //the function removeFromLikedEpisode is used\n        this.removeFromLikedEpisode(episodeId);\n        //It gets all the disliked episodes\n        return this.getDislikedEpisodes().then(result => {\n            if (result) {\n                //If the result is true, it means that there is an existent disliked list already\n                //The episodeId is add to result\n                result.push(episodeId);\n                //It is saved\n                this.storage.set(DISLIKE_KEY, result);\n                return true;\n            } else {\n                //If the result is false, it means that there is no dislike list yet\n                //The episodeId is saved in disliked the list\n                this.storage.set(DISLIKE_KEY, [episodeId]);\n                return true;\n            }\n        });\n    }\n\n    //When an episode is liked or disliked it will be removed from both lists\n    neutreEpisode(episodeId) {\n        this.removeFromDislikedEpisode(episodeId);\n        this.removeFromLikedEpisode(episodeId);\n    }\n\n    //It removes an episodeId from the liked list\n    removeFromLikedEpisode(episodeId) {\n        return this.getLikedEpisodes().then(result => {\n            //It verifies if the given characterId is in the liked list and removes it\n            if (result &&  result.indexOf(episodeId) !== -1) {   \n                var index = result.indexOf(episodeId);\n                result.splice(index, 1);\n                return this.storage.set(LIKE_KEY, result);\n            }\n        });\n    }\n\n    //It removes an episodeId from the disliked list\n    removeFromDislikedEpisode(episodeId) {\n        return this.getDislikedEpisodes().then(result => {\n            console.log(JSON.stringify(result.indexOf(episodeId)));\n            //It verifies if the given characterId is in the disliked list and removes it\n            if (result && result.indexOf(episodeId) !== -1) {\n                var index = result.indexOf(episodeId);\n                result.splice(index, 1);\n                return this.storage.set(DISLIKE_KEY, result);\n            }\n        });\n    }\n}\n"],"sourceRoot":"webpack:///"}